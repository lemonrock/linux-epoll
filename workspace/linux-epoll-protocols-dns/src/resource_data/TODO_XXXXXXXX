Outstanding parser issues:-
    - Need to validate the data for DS-Delete when using CDS and CDNSKEY records:-
        "The contents of the CDS or CDNSKEY RRset MUST contain one RR and only
            contain the exact fields as shown below.

               CDS 0 0 0 0

               CDNSKEY 0 3 0 0

            The keying material payload is represented by a single 0.  This
            record is signed in the same way as regular CDS/CDNSKEY RRsets are
            signed.

            Strictly speaking, the CDS record could be "CDS X 0 X 0" as only the
            DNSKEY algorithm is what signals the DELETE operation, but for
            clarity, the "0 0 0 0" notation is mandated -- this is not a
            definition of DS digest algorithm 0.  The same argument applies to
            "CDNSKEY 0 3 0 0"; the value 3 in the second field is mandated by
            [RFC4034], Section 2.1.2."
    - We need to actually occasionally accept the security algos for NSEC3
    - We need to fix the parsing of HIP resource server names.
    - We need to consider supporting compressed names in ALL resource records if we want to work with multicast-DNS.


SOA replies
    - no answer, just a SOA record: commonly means no domain
    - CNAME in in answer, SOA record in authority
        eg dig +tries=1 +rrcomments +nofail +qr +multiline AAAA blog.cloudflare.com
        eg dig +additional +authority DNSKEY blog.cloudflare.com
        - get a CNAME, no AAAA records, and a SOA in authority section for ***ghost.io*** NOT cloudflare.com; query was successful. Effectively a hint that there is no AAAA or DNSKEY record (which there isn't).

For A / AAAA queries:-

    Use of /etc/hostname and /etc/dnsdomainname (Linux-ish)
        (just hostname, just domainname)
         Slackware uses /etc/HOSTNAME
         RedHat did use the line `HOSTNAME=xxxx` in /etc/sysconfig/network
         Gentoo at one time use `/etc/conf.d/hostname` with `HOSTNAME="xxxx"` (note the presence of double quotes).

         Really, we need to look at how `hostname -f` is implemented.
            int gethostname(char *name, size_t len)
            {
            	size_t i;
            	struct utsname uts;
            	if (uname(&uts)) return -1;
            	if (len > sizeof uts.nodename) len = sizeof uts.nodename;
            	for (i=0; i<len && (name[i] = uts.nodename[i]); i++);
            	if (i && i==len) name[i-1] = 0;
            	return 0;
            }
            int getdomainname(char *name, size_t len)
            {
                struct utsname temp;
                uname(&temp);
                if (!len || strlen(temp.domainname) >= len) {
                    errno = EINVAL;
                    return -1;
                }
                strcpy(name, temp.domainname);
                return 0;
            }
            int uname(struct utsname *uts)
            {
            	return syscall(SYS_uname, uts);
            }

            So it's the uname() function which returns a utsname struct.
            Linux:-
                pub struct utsname {
                    pub sysname: [::c_char; 65],
                    pub nodename: [::c_char; 65],
                    pub release: [::c_char; 65],
                    pub version: [::c_char; 65],
                    pub machine: [::c_char; 65],
                    pub domainname: [::c_char; 65]
            }

            nodename is available on all, and varies from 32 characters to 257.
            domainname is only available on Linux.

    Use of /etc/hosts file
        - Should be used for A and AAAA queries;
        - Should be loaded into memory and file-watched;
        The /etc/hosts file accepts alias names
            eg `192.168.1.3     maple maple.trees.com`

    Use of /etc/resolv.conf
        http://man7.org/linux/man-pages/man5/resolv.conf.5.html
        LOCALDOMAIN environment variable takes precedence over `search` entry
        RES_OPTIONS takes precedence generally.
        If not present, default is to use 127.0.0.1

    Use of /etc/nsswitch.conf
        http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html
            Use the `hosts` database for host name lookup
            Could use the `services` database (via `/etc/services`) for a back-up for SRV / URI look up.
        Frankly, this approach is obsolescent.

    Weird
        DNS wildcards
            https://tools.ietf.org/html/rfc4592
            dig "*.live.com"

    Exceptions
        example.com, example.org
        "localhost" and names in the ".local" TLD.
        Are there any others?

        RFC 6761 reserves


        RFC 6762 recommends the following 'internal' domain names:-
          .intranet.
          .internal.
          .private.
          .corp.
          .home.
          .lan.


    Special validations
        - PTR queries are invalid for link-local domains such as "254.169.in-addr.arpa." and the IPv6 link-local reverse mapping domains "8.e.f.ip6.arpa.", "9.e.f.ip6.arpa.", "a.e.f.ip6.arpa.", and "b.e.f.ip6.arpa.".
        - PTR queries which are not for *.in-addr.arpa. or *.ip6.arpa. or do not fit the format (4 labels or 32 labels). Think also about multicast addresses, etc.
        - RFC 6761:-
                 10.in-addr.arpa.      21.172.in-addr.arpa.  26.172.in-addr.arpa.
                 16.172.in-addr.arpa.  22.172.in-addr.arpa.  27.172.in-addr.arpa.
                 17.172.in-addr.arpa.  30.172.in-addr.arpa.  28.172.in-addr.arpa.
                 18.172.in-addr.arpa.  23.172.in-addr.arpa.  29.172.in-addr.arpa.
                 19.172.in-addr.arpa.  24.172.in-addr.arpa.  31.172.in-addr.arpa.
                 20.172.in-addr.arpa.  25.172.in-addr.arpa.  168.192.in-addr.arpa.
            test. - supposed to be passed to resolver, but supposed to eventually by NXDOMAIN
            example. example.com. example.net. example.org. - supposed to be passed to resolver, but supposed to eventually by NXDOMAIN
            localhost.
            invalid. - always returns NXDOMAIN
         - https://www.iana.org/domains/reserved
         - https://www.iana.org/assignments/special-use-domain-names/special-use-domain-names.xhtml




    RFC 6762: ?Latest Multicast-DNS spec.

    RFC 3484 / 6764 destination address selection.



For others:-

    What about a local zone file?



	/* The following implements a subset of RFC 3484/6724 destination
	 * address selection by generating a single 31-bit sort key for
	 * each address. Rules 3, 4, and 7 are omitted for having
	 * excessive runtime and code size cost and dubious benefit.
	 * So far the label/precedence table cannot be customized. */
