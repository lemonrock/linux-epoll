


Outstanding parser issues:-
    - Need to validate the data for DS-Delete when using CDS and CDNSKEY records:-
        "The contents of the CDS or CDNSKEY RRset MUST contain one RR and only
            contain the exact fields as shown below.

               CDS 0 0 0 0

               CDNSKEY 0 3 0 0

            The keying material payload is represented by a single 0.  This
            record is signed in the same way as regular CDS/CDNSKEY RRsets are
            signed.

            Strictly speaking, the CDS record could be "CDS X 0 X 0" as only the
            DNSKEY algorithm is what signals the DELETE operation, but for
            clarity, the "0 0 0 0" notation is mandated -- this is not a
            definition of DS digest algorithm 0.  The same argument applies to
            "CDNSKEY 0 3 0 0"; the value 3 in the second field is mandated by
            [RFC4034], Section 2.1.2."
    - We need to actually occasionally accept the security algos for NSEC3
    - We need to fix the parsing of HIP resource server names.
    - We need to consider supporting compressed names in ALL resource records if we want to work with multicast-DNS.



// in practice, we'll implement dedicated handlers for the various resource records of interest.
// A, AAAA, NS (no CNAMEs allowed), SOA, PTR (mostly useless on the modern internet), SRV, MX, ?KX, IPSECKEY, LOC, URI, CAA, TXT

// NS, SOA, PTR, MX, ?KX, SRV are not allowed to be aliases.
// Looking up A can give a CNAME.
// Looking up AAAA can give a CNAME.
// Looking up PTR can give a CNAME.
//		// expires_at_time = RR TTL + now(); OR lower of RR TTL / SOA min TTL + now();
//		type ExpiresAtTime = Timespec;
//
//		enum CacheEntry<ResourceRecord>
//		{
//			Alias(Name), // 'CNAME'. Done properly Name is a Rc or Arc.
//
//			NoSuchDomain, // 'SOA'.
//
//			Records(Vec<ResourceRecord>), // eg bunch of A records, ought to be sorted.
//		}
//
//		struct Cache
//		{
//			cname: HashMap<(Name, DataType), (expires_at_time, CacheEntry<CNAME>)>,
//			a: HashMap<(Name, DataType), (expires_at_time, CacheEntry<Ipv4Addr>)>,
//			aaaaa: HashMap<(Name, DataType), (expires_at_time, CacheEntry<Ipv6Addr>)>,
//			services: HashMap<(Name, DataType), (expires_at_time, CacheEntry<SRV>)>,
//			uri: HashMap<(Name, DataType), (expires_at_time, CacheEntry<URI>)>,
//			tlsa: HashMap<(Name, DataType), (expires_at_time, CacheEntry<TLSA>)>,
//			smimea: HashMap<(Name, DataType), (expires_at_time, CacheEntry<SMIMEA>)>,
//			// loc, sshfp, openpgpkey, ipseckey, mx, kx
//			//services HashMap<(Name, DataType), (expires_at_time, CacheEntry<SRV>)>,
//
//			// we need some sort of ordering to the inner so that when we reach a fixed capacity we know what to drop.
//			// use an IndexMap and just drop the last inserted (we've done something like this before).
//		}


		// Look for the presence of a SOA record; use its minimum TTL or TTL (whichever is lower) to cache a negative response, with may be a sensible cap ontop, eg 1 hour, 5 minutes, etc.
		// See https://tools.ietf.org/html/rfc2308 Section 2.2 for various permutations; a CNAME (and presumably DNAME) is allowed in the answer section. This accommodates the lack of IPv6 for the cloudflare blog.
		// SOA name will be for the resolved CNAME (ie right-hand-side of CNAME) less host name or the original QNAME.
		// eg AAAA for blog.cloudflare.com CNAME cloudflare.ghost.io and  ghost.io SOA sara.ns.cloudflare.com ...
		// eg AAAA for cloudflare.ghost.io give no answers and   ghost.io SOA sara.ns.cloudflare.com ...

		// 3 types of negative NODATA response and a 4th which is a referral; all have to be inferred.
		// Negative responses without SOA records SHOULD NOT be cached.

		// Just about anything can be CNAME'd (DNAME'd), although it would seem odd for a SRV record to be redirected to _udp from _tcp.

		// PTR: Not supported - use https://securitytrails.com instead. It is useless for a security check and is often wrong.

		// CNAME chain limits; BIND uses 16 (and also to detect loops).
		// Reworld example: dig www.microsoft.com  (3 CNAMEs, one A record) - but cloudflare returns all CNAMEs in one record.

		/*
			query for A, get back bunch of A
				- hash_map.insert(A, As);

			query for A, get back just a CNAME
				- hash_map.insert(A, CNAME)
				- do a further query; need to be careful with circular CNAME chains and long CNAME chains

			query for A, get back CNAME and a bunch of As
				- hash_map.insert(A, CNAME)
				- hash_map.insert(A, As)

			query for A, get back CNAME and SOA in authority section
				- hash_map.insert(A, CNAME)
				- hash_map.insert_negative_cache(A, SOA); calculate cache TTL is the lower of RR TTL and the SOA minimum TTL (technically it should be SOA minimum TTL but RR TTL may be short implying the SOA record itself may have become updated)

			struct Cache

		*/


SOA replies
    - no answer, just a SOA record: commonly means no domain
    - CNAME in in answer, SOA record in authority
        eg dig +tries=1 +rrcomments +nofail +qr +multiline AAAA blog.cloudflare.com
        eg dig +additional +authority DNSKEY blog.cloudflare.com
        - get a CNAME, no AAAA records, and a SOA in authority section for ***ghost.io*** NOT cloudflare.com; query was successful. Effectively a hint that there is no AAAA or DNSKEY record (which there isn't).

For A / AAAA queries:-

    Use of /etc/hostname and /etc/dnsdomainname (Linux-ish)
        (just hostname, just domainname)
         Slackware uses /etc/HOSTNAME
         RedHat did use the line `HOSTNAME=xxxx` in /etc/sysconfig/network
         Gentoo at one time use `/etc/conf.d/hostname` with `HOSTNAME="xxxx"` (note the presence of double quotes).

         Really, we need to look at how `hostname -f` is implemented.
            int gethostname(char *name, size_t len)
            {
            	size_t i;
            	struct utsname uts;
            	if (uname(&uts)) return -1;
            	if (len > sizeof uts.nodename) len = sizeof uts.nodename;
            	for (i=0; i<len && (name[i] = uts.nodename[i]); i++);
            	if (i && i==len) name[i-1] = 0;
            	return 0;
            }
            int getdomainname(char *name, size_t len)
            {
                struct utsname temp;
                uname(&temp);
                if (!len || strlen(temp.domainname) >= len) {
                    errno = EINVAL;
                    return -1;
                }
                strcpy(name, temp.domainname);
                return 0;
            }
            int uname(struct utsname *uts)
            {
            	return syscall(SYS_uname, uts);
            }

            So it's the uname() function which returns a utsname struct.
            Linux:-
                pub struct utsname {
                    pub sysname: [::c_char; 65],
                    pub nodename: [::c_char; 65],
                    pub release: [::c_char; 65],
                    pub version: [::c_char; 65],
                    pub machine: [::c_char; 65],
                    pub domainname: [::c_char; 65]
            }

            nodename is available on all, and varies from 32 characters to 257.
            domainname is only available on Linux.

    Use of /etc/hosts file
        - Should be used for A and AAAA queries;
        - Should be loaded into memory and file-watched;
        The /etc/hosts file accepts alias names
            eg `192.168.1.3     maple maple.trees.com`
                - maple.trees.com is a CNAME of maple.

    Use of /etc/resolv.conf
        http://man7.org/linux/man-pages/man5/resolv.conf.5.html
        LOCALDOMAIN environment variable takes precedence over `search` entry
        RES_OPTIONS takes precedence generally.
        If not present, default is to use 127.0.0.1

        It is possible for there to be more than /etc/resolv.conf file eg
             /etc/ppp/resolv.conf and /etc/dhcpc/resolv.conf and use the contents of whichever changed last,  giving automatic switching between DNS servers. (eg for computers connecting via PPP or network)


    Use of /etc/nsswitch.conf
        http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html
            Use the `hosts` database for host name lookup
            Could use the `services` database (via `/etc/services`) for a back-up for SRV / URI look up.
        Frankly, this approach is obsolescent.

    Weird
        DNS wildcards
            https://tools.ietf.org/html/rfc4592
            dig "*.live.com"

    Exceptions
        example.com, example.org
        "localhost" and names in the ".local" TLD.
        Are there any others?

        RFC 6761 reserves


        RFC 6762 recommends the following 'internal' domain names:-
          .intranet.
          .internal.
          .private.
          .corp.
          .home.
          .lan.

    RFC 3484
        IPv4 sort list

    RFC 6724
        IPv6 sort list


    Special validations
        - PTR queries are invalid for link-local domains such as "254.169.in-addr.arpa." and the IPv6 link-local reverse mapping domains "8.e.f.ip6.arpa.", "9.e.f.ip6.arpa.", "a.e.f.ip6.arpa.", and "b.e.f.ip6.arpa.".
        - PTR queries which are not for *.in-addr.arpa. or *.ip6.arpa. or do not fit the format (4 labels or 32 labels). Think also about multicast addresses, etc.
        - RFC 6761:-
                 10.in-addr.arpa.      21.172.in-addr.arpa.  26.172.in-addr.arpa.
                 16.172.in-addr.arpa.  22.172.in-addr.arpa.  27.172.in-addr.arpa.
                 17.172.in-addr.arpa.  30.172.in-addr.arpa.  28.172.in-addr.arpa.
                 18.172.in-addr.arpa.  23.172.in-addr.arpa.  29.172.in-addr.arpa.
                 19.172.in-addr.arpa.  24.172.in-addr.arpa.  31.172.in-addr.arpa.
                 20.172.in-addr.arpa.  25.172.in-addr.arpa.  168.192.in-addr.arpa.
            test. - supposed to be passed to resolver, but supposed to eventually by NXDOMAIN
            example. example.com. example.net. example.org. - supposed to be passed to resolver, but supposed to eventually by NXDOMAIN
            localhost.
            invalid. - always returns NXDOMAIN
         - https://www.iana.org/domains/reserved
         - https://www.iana.org/assignments/special-use-domain-names/special-use-domain-names.xhtml




    RFC 6762: ?Latest Multicast-DNS spec.

    RFC 3484 / 6764 destination address selection.



For others:-

    What about a local zone file?



	/* The following implements a subset of RFC 3484/6724 destination
	 * address selection by generating a single 31-bit sort key for
	 * each address. Rules 3, 4, and 7 are omitted for having
	 * excessive runtime and code size cost and dubious benefit.
	 * So far the label/precedence table cannot be customized. */
